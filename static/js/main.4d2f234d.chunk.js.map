{"version":3,"sources":["imageData.js","components/Gallery/ImageView.js","components/Modal/PostGrid.js","components/Profile/ProfileImg.js","components/Modal/Modal.js","components/Profile/UserGrid.js","components/Gallery/Gallery.js","serviceWorker.js","index.js","App.js"],"names":["IMAGES","id","title","Image","styled","div","index","inModal","css","ImageView","useParams","image","parseInt","PostGrid","InfoGrid","ProfileImage","mini","OverflowHidden","createGlobalStyle","ModalStyled","top","UserDetail","Modal","history","useHistory","onClick","e","stopPropagation","goBack","style","position","left","bottom","right","height","background","window","scrollY","innerHeight","UserGridStyled","Photo","Name","Label","Description","UserGrid","PhotoGrid","cascade","TabLink","Link","selected","LinkGrid","ImageLink","Gallery","match","location","useLocation","search","to","pathname","url","map","i","key","state","Boolean","hostname","ReactDOM","render","exact","path","component","children","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4d2f234d.chunk.js","sourcesContent":["export const IMAGES = [\n  { id: 1, title: \"Friend\" },\n  { id: 2, title: \"Spark\" },\n  { id: 3, title: \"Beauty\" },\n  { id: 4, title: \"Build\" },\n  { id: 5, title: \"View\" },\n  { id: 6, title: \"Wall\" },\n  { id: 7, title: \"Joy\" },\n  { id: 8, title: \"Freedom\" },\n  { id: 9, title: \"Sky\" },\n  { id: 10, title: \"Different\" },\n  { id: 11, title: \"Yammi\" },\n  { id: 12, title: \"Stripes\" },\n  { id: 13, title: \"Red Water\" },\n  { id: 14, title: \"Green Dog\" },\n  { id: 15, title: \"Pink Love\" },\n  { id: 16, title: \"Why not?\" },\n  { id: 17, title: \"Crimson\" }\n];\n","import React from \"react\";\nimport { IMAGES } from \"../../imageData\";\nimport { useParams } from \"react\";\nimport styled, { css } from \"styled-components\";\n\nexport const Image = styled.div`\n  width: 305px;\n  height: 305px;\n  background: no-repeat center/150% url(/img/${({ index }) => index}.jpeg);\n  transition: 0.3s opacity;\n\n  @media (max-width: 990px) {\n    width: 100%;\n  }\n  ${({ inModal }) =>\n    !inModal &&\n    css`\n      &:hover {\n        opacity: 0.7;\n      }\n    `}\n`;\n\nexport default function ImageView() {\n  let { id } = useParams();\n  let image = IMAGES[parseInt(id, 10) - 1];\n\n  if (!image) return <div>Image not found</div>;\n\n  return (\n    <div>\n      <h1>{image.title}</h1>\n      <Image index={image.id} />\n    </div>\n  );\n}\n","import styled from \"styled-components\";\n\nexport const PostGrid = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  @media (max-width: 990px) {\n    grid-template-columns: 1fr;\n  }\n`;\n\nexport const InfoGrid = styled.div`\n  padding: 20px;\n  display: grid;\n  grid-auto-rows: 60px auto 40px;\n`;\n","import styled, { css } from \"styled-components\";\n\nexport const ProfileImage = styled.div`\n  width: 200px;\n  height: 200px;\n  background: no-repeat center/190% url(/img/profile.jpeg);\n  border-radius: 100px;\n  margin: 40px;\n\n  @media (max-width: 990px) {\n    margin: 20px;\n    width: 120px;\n    height: 120px;\n  }\n\n  ${({ mini }) =>\n    mini &&\n    css`\n      width: 50px;\n      height: 50px;\n      margin: 5px;\n      @media (max-width: 990px) {\n        width: 50px;\n        height: 50px;\n      }\n    `}\n`;\n","import React from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { IMAGES } from \"../../imageData\";\nimport { Image } from \"../Gallery/ImageView\";\nimport styled, { createGlobalStyle } from \"styled-components\";\nimport { PostGrid, InfoGrid } from \"./PostGrid\";\nimport { ProfileImage } from \"../Profile/ProfileImg\";\n\nconst OverflowHidden = createGlobalStyle`\n  body{\n    overflow:hidden;\n  }\n`;\n\nconst ModalStyled = styled.div`\n  position: absolute;\n  background: #fff;\n  top: ${({ top }) => top}px;\n  left: 25%;\n  right: 20%;\n  padding: 15;\n  border: 2px solid #444;\n  width: 600px;\n\n  @media (max-width: 990px) {\n    top: ${({ top }) => top}px;\n    left: 0;\n    right: 0;\n    width: auto;\n  }\n`;\n\nconst UserDetail = styled.div`\n  display: grid;\n  justify-content: left;\n  grid-template-columns: auto auto;\n  gap: 10px;\n\n  @media (max-width: 990px) {\n    h2 {\n      align-self: center;\n    }\n  }\n`;\nexport default function Modal() {\n  let history = useHistory();\n  let { id } = useParams();\n  let image = IMAGES[parseInt(id, 10) - 1];\n\n  if (!image) return null;\n\n  let back = e => {\n    e.stopPropagation();\n    history.goBack();\n  };\n\n  return (\n    <div\n      onClick={back}\n      style={{\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        bottom: 0,\n        right: 0,\n        height: \"5000px\",\n        background: \"rgba(0, 0, 0, 0.8)\"\n      }}\n    >\n      <ModalStyled top={window.scrollY + window.innerHeight / 2 - 250}>\n        <OverflowHidden />\n        <PostGrid>\n          <Image inModal index={image.id} />\n          <InfoGrid>\n            <UserDetail>\n              <ProfileImage mini />\n              <h2>Image</h2>\n            </UserDetail>\n            <div>\n              <h2>{image.title}</h2>\n              <div>Comments</div>\n            </div>\n            <div>306 likes</div>\n          </InfoGrid>\n        </PostGrid>\n      </ModalStyled>\n    </div>\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { ProfileImage } from \"./ProfileImg\";\n\nconst UserGridStyled = styled.div`\n  display: grid;\n  justify-content: center;\n  margin-top: 80px;\n  margin-bottom: 50px;\n  grid-template-areas:\n    \"photo name\"\n    \"photo label\"\n    \"photo description\";\n\n  @media (max-width: 990px) {\n    grid-template-areas:\n      \"photo name\"\n      \"label .\"\n      \"description .\";\n    grid-gap: 10px;\n  }\n`;\n\nconst Photo = styled.div`\n  grid-area: photo;\n`;\nconst Name = styled.div`\n  grid-area: name;\n  font-size: 35px;\n  @media (max-width: 990px) {\n    align-self: center;\n  }\n`;\nconst Label = styled.div`\n  grid-area: label;\n  font-weight: bold;\n\n  @media (max-width: 990px) {\n    padding: 0 20px;\n  }\n`;\nconst Description = styled.div`\n  grid-area: description;\n  max-width: 400px;\n  text-align: justify;\n  text-justify: inter-word;\n\n  @media (max-width: 990px) {\n    padding: 0 20px;\n    grid-column: 1/3;\n  }\n`;\n\nexport default function UserGrid() {\n  return (\n    <UserGridStyled>\n      <Photo>\n        <ProfileImage />\n      </Photo>\n      <Name>Image Galley</Name>\n      <Label>306 followers</Label>\n      <Description>\n        Lorem ipsum dolor amet poke intelligentsia retro synth, brunch blog wolf\n        snackwave wayfarers sriracha meditation hot chicken neutra hell of. Put\n        a bird on it selfies retro, mustache try-hard iPhone shabby chic schlitz\n        kale chips ethical coloring book chicharrones venmo pug.\n      </Description>\n    </UserGridStyled>\n  );\n}\n","import React from \"react\";\nimport styled, { css } from \"styled-components\";\nimport UserGrid from \"../Profile/UserGrid\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { IMAGES } from \"../../imageData\";\n\nconst PhotoGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 305px);\n  justify-content: center;\n  gap: 20px;\n  grid-auto-rows: 305px;\n  ${({ cascade }) =>\n    cascade &&\n    css`\n      gap: 5px;\n      grid-auto-rows: 200px;\n    `};\n  @media (max-width: 990px) {\n    gap: 5px;\n    grid-template-columns: repeat(3, 1fr);\n    grid-auto-rows: calc(33vw - 10px);\n  }\n`;\n\nconst TabLink = styled(Link)`\n  text-decoration: none;\n  color: grey;\n  font-size: 22px;\n  text-transform: uppercase;\n  letter-spacing: 3px;\n  ${({ selected }) =>\n    selected &&\n    css`\n      color: black;\n    `};\n`;\n\nconst LinkGrid = styled.div`\n  display: grid;\n  grid-template-columns: auto auto;\n  justify-content: center;\n  gap: 20px;\n  margin-bottom: 20px;\n`;\n\nconst ImageLink = styled(Link)`\n  background: no-repeat center/150% url(/img/${({ index }) => index}.jpeg);\n  transition: 0.3s opacity;\n\n  &:hover {\n    opacity: 0.7;\n  }\n\n  ${({ cascade }) =>\n    cascade &&\n    css`\n      &:nth-of-type(2n) {\n        background-size: cover;\n        grid-row-start: span 2;\n      }\n    `}\n`;\n\nexport default function Gallery({ match }) {\n  let location = useLocation();\n  const cascade = location.search === \"?type=cascade\";\n\n  return (\n    <div>\n      <UserGrid />\n      <LinkGrid>\n        <TabLink selected={!cascade} to={{ pathname: `${match.url}` }}>\n          square\n        </TabLink>\n        <TabLink\n          selected={cascade}\n          to={{ pathname: `${match.url}`, search: \"?type=cascade\" }}\n        >\n          cascade\n        </TabLink>\n      </LinkGrid>\n      <PhotoGrid cascade={cascade}>\n        {IMAGES.map(i => (\n          <ImageLink\n            key={i.id}\n            index={i.id}\n            cascade={cascade}\n            to={{\n              pathname: `/img/${i.id}`,\n              // This is the trick! This link sets\n              // the `background` in location state.\n              state: { background: location }\n            }}\n          />\n        ))}\n      </PhotoGrid>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport { Switch, Route, useLocation } from \"react-router-dom\";\nimport Modal from \"./components/Modal/Modal\";\nimport Gallery from \"./components/Gallery/Gallery\";\nimport ImageView from \"./components/Gallery/ImageView\";\n\nexport default function App() {\n  let location = useLocation();\n  let background = location.state && location.state.background;\n\n  return (\n    <div>\n      <Switch location={background || location}>\n        <Route exact path=\"/\" component={Gallery} />\n        <Route path=\"/img/:id\" component={ImageView} />\n      </Switch>\n\n      {/* Show the modal when a background page is set */}\n      {background && <Route path=\"/img/:id\" children={<Modal />} />}\n    </div>\n  );\n}\n"],"sourceRoot":""}